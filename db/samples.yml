game_masters:
  - id: 0
    email: "edouardf@lewagon.org"
    password: "edouardf"

games:
  - id: 0
    title: "Let's code and drink!"
    description: "First code then drink! Whatever..."
    wifi_network: "Le Wagon"
    wifi_password: "thestartupway"
    starts_at: "2018-05-29T13:32:34+02:00"
    password: "batch145"
    game_master_id: 0

exercises:
  - id: 0
    title: "Hello World"
    rules: |
      The classical introductory exercise.

      Just say "Hello, World!".

      Write a function that returns the string "Hello, World!".
    specs: >
      require "attempt"

      describe "The `hello_world` method" do
        it "should say Hello, World!" do
          expect(hi()).to eq("Hello, World!")
        end
      end
    template: |


      def hi
        # TODO: return "Hello, World!"
      end


    solution: >
      def hi
        return "Hello, World!"
      end
  - id: 1
    title: "Circle Area"
    rules: |
      The goal is to implement a circle_area method which takes one parameter, radius, and returns the area of the circle of this given radius.

      As a reminder, here is the formula: A = PI * (r * r)
    specs: >
      require "attempt"

      describe "The `circle_area` method" do
        it "should return a number" do
          expect(circle_area(0)).to be_a Numeric
        end

        it "should return 3.14 (PI) if the radius is 1" do
          expect(circle_area(1)).to be_within(0.1).of(3.14)
        end

        it "should return 78.5 if the radius is 5" do
          expect(circle_area(5)).to be_within(0.1).of(78.5)
        end

        it "should return 0 if the radius is negative" do
          expect(circle_area(-1)).to eq(0)
        end
      end
    template: |


      def circle_area(radius)
        # TODO: Implement the `circle_area` method
      end


    solution: >
      def circle_area(radius)
        if radius > 0
          return Math::PI * radius ** 2
        else
          return 0
        end
      end
  - id: 2
    title: Vowel count
    rules: |
      Return the number (count) of vowels in the given string.

      We will consider a, e, i, o, and u as vowels for this Kata.

      The input string will only consist of lower case letters and/or spaces.
    specs:
      require "attempt"
      describe "The `getCount` method" do
        it "should return a number" do
          expect(getCount("wagon")).to be_a Numeric
        end
        it "should return 2 if the word is 'wagon'" do
          expect(getCount("wagon")).to eq(2)
        end
        it "should return 4 if the word is 'wednesday'" do
          expect(getCount("wednesday")).to eq(4)
        end
        it "should return 4 if the word is 'january'" do
          expect(getCount("january")).to eq(4)
        end
      end
    template: |
      def getCount(inputStr)
        #your code here
      end
    solution: |
      VOWELS = ['a','e','i','o','u','y']
      def getCount(word)
        word.split(//).select { |c| VOWELS.include? c }.count
      end
  - id: 3
    title: "Reduce but grow"
    rules: |
      Given and array of integers (x), return the result of multiplying the values together in order. Example:

      [1, 2, 3] --> 6
      
      For the beginner, try to use the reduce method - it comes in very handy quite a lot so is a good one to know.
      Array will not be empty.
    specs: >
      describe "Basic tests" do
        Test.assert_equals(grow([1, 2, 3]), 6)
        Test.assert_equals(grow([4, 1, 1, 1, 4]), 16)
        Test.assert_equals(grow([2, 2, 2, 2, 2, 2]), 64)
      end
    template: |
      def grow(x) 
        # code here
      end
    solution: >
      def grow(x) 
        x.reduce(1) { |r, a| r * a }
      end
  - id: 4
    title: "Sum of positive"
    rules: |
      You get an array of numbers, return the sum of all of the positives ones.

      Example [1,-4,7,12] => 1 + 7 + 12 = 20

      Note: if there is nothing to sum, the sum is default to 0.
    specs: >
      describe "positive_sum" do
        it "works for some examples" do
          Test.assert_equals positive_sum([1,2,3,4,5]), 15
          Test.assert_equals positive_sum([1,-2,3,4,5]), 13
          Test.assert_equals positive_sum([-1,2,3,4,-5]), 9
        end
        it "returns 0 when array is empty" do
          Test.assert_equals positive_sum([]), 0
        end
        it "returns 0 when all elements are negative" do
          Test.assert_equals positive_sum([-1,-2,-3,-4,-5]), 0
        end
      end
    template: |
      def positive_sum(arr)
        # your code here
      end
    solution: >
      def positive_sum(arr)
        arr.reduce(0) { |r,s| r + (s > 0 ? s : 0)}
      end


rounds:
  - id: 0
    game_id: 0
    exercise_id: 0
    number_of_winners: 3
  - id: 1
    game_id: 0
    exercise_id: 1
    number_of_winners: 2
  - id: 2
    game_id: 0
    exercise_id: 2
    number_of_winners: 1


