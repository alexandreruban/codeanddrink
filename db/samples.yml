game_masters:
  - id: 0
    email: "edouardf@lewagon.org"
    password: "edouardf"

games:
  - id: 0
    title: "Let's code and drink!"
    description: "First code then drink! Whatever..."
    wifi_network: "Le Wagon"
    wifi_password: "thestartupway"
    starts_at: "2018-05-29T13:32:34+02:00"
    password: "batch145"
    game_master_id: 0

exercises:
  - id: 0
    title: "Hello World"
    rules: |
      The classical introductory exercise.

      Just say "Hello, World!".

      Write a function that returns the string "Hello, World!".
    specs: >
      require "attempt"

      describe "The `hello_world` method" do
        it "should say Hello, World!" do
          expect(hi()).to eq("Hello, World!")
        end
      end
    template: >
      def hi
        # TODO: return "Hello, World!"
      end
    solution: >
      def hi
        return "Hello, World!"
      end
  - id: 1
    title: "Circle Area"
    rules: |
      The goal is to implement a circle_area method which takes one parameter, radius, and returns the area of the circle of this given radius.

      As a reminder, here is the formula: A = PI * (r * r)
    specs: >
      require "attempt"

      describe "The `circle_area` method" do
        it "should return a number" do
          expect(circle_area(0)).to be_a Numeric
        end

        it "should return 3.14 (PI) if the radius is 1" do
          expect(circle_area(1)).to be_within(0.1).of(3.14)
        end

        it "should return 78.5 if the radius is 5" do
          expect(circle_area(5)).to be_within(0.1).of(78.5)
        end

        it "should return 0 if the radius is negative" do
          expect(circle_area(-1)).to eq(0)
        end
      end
    template: >
      def circle_area(radius)
        # TODO: Implement the `circle_area` method
      end
    solution: >
      def circle_area(radius)
        if radius > 0
          return Math::PI * radius ** 2
        else
          return 0
        end
      end
  - id: 2
    title: Vowel count
    rules: |
      The goal is to implement a count_vowel method which takes one word as parameter.

      The method should return the number of vowels in the given word.
    specs:
      require "attempt"

      describe "The `count_vowels` method" do
        it "should return a number" do
          expect(count_vowels("wagon")).to be_a Numeric
        end

        it "should return 2 if the word is 'wagon'" do
          expect(count_vowels("wagon")).to eq(2)
        end

        it "should return 4 if the word is 'wednesday'" do
          expect(count_vowels("wednesday")).to eq(4)
        end

        it "should return 4 if the word is 'january'" do
          expect(count_vowels("january")).to eq(4)
        end
      end
    template: |
      VOWELS = ['a','e','i','o','u','y']
      def count_vowels(word)
        # TODO: Implement the `count_vowel` method
      end
    solution: |
      VOWELS = ['a','e','i','o','u','y']
      def count_vowels(word)
        word.split(//).select { |c| VOWELS.include? c }.count
      end

rounds:
  - id: 0
    game_id: 0
    exercise_id: 0
    number_of_winners: 3
  - id: 1
    game_id: 0
    exercise_id: 1
    number_of_winners: 2
  - id: 2
    game_id: 0
    exercise_id: 2
    number_of_winners: 1


