game_masters:
  - id: 0
    email: "edouardf@lewagon.org"
    password: "edouardf"

players:
  - username: marjorie
    game_id: 0
  - username: alexandre
    game_id: 0
  - username: guillaume
    game_id: 0

games:
  - id: 0
    title: "Let's code and drink!"
    description: "First code then drink! Whatever..."
    wifi_network: "Le Wagon"
    wifi_password: "allyouneediscodeanddrink"
    starts_at: "2018-05-29T13:32:34+02:00"
    password: "batch145"
    game_master_id: 0

exercises:
  - id: 0
    title: "Circle Area"
    rules: >
      The goal is to implement a circle_area method which takes one parameter,
      radius, and returns the area of the circle of this given radius. As a reminder,
      here is the formula: 'A = pi * (r * r)'
    specs: >
      require "attempt"

      describe "The `circle_area` method" do
        it "should return a number" do
          expect(circle_area(0)).to be_a Numeric
        end

        it "should return 3.14 (PI) if the radius is 1" do
          expect(circle_area(1)).to be_within(0.1).of(3.14)
        end

        it "should return 78.5 if the radius is 5" do
          expect(circle_area(5)).to be_within(0.1).of(78.5)
        end

        it "should return 0 if the radius is negative" do
          expect(circle_area(-1)).to eq(0)
        end
      end
    template: >
      def circle_area(radius)
        # TODO: Implement the `circle_area` method
      end
    solution: >
      def circle_area(radius)
        if radius > 0
          return Math::PI * radius ** 2
        else
          return 0
        end
      end
  - id: 1
    title: "Github Nickname"
    rules: >
      Make sure that the method today_my_buddys_github_nickname_is does return
      (this is different to puts!) the github username of your buddy.
    specs: >
      require "attempt"

      describe "#buddy" do

        let(:buddy) { today_my_buddys_github_nickname_is }

        it "should not be blank and be a real github username" do
          expect(buddy).not_to be_nil
          expect(buddy).not_to eq('')

          require "open-uri"
          expect { open("https://github.com/#{buddy}").read }.not_to raise_error,
            "The buddy '#{buddy}' you returned is not a valid github nickname (check case)"
        end
      end
    template: >
      def today_my_buddys_github_nickname_is
        # TODO: Return the GitHub nickname of your buddy.
      end
    solution: >
      def today_my_buddys_github_nickname_is
        return "Emna"
      end

rounds:
  - id: 0
    game_id: 0
    exercise_id: 0
    number_of_winners: 5
<<<<<<< HEAD
  - id: 1
    game_id: 0
    exercise_id: 1
    number_of_winners: 5
=======
>>>>>>> master

